{"version":3,"file":"token-action-hud-ironsworn.min.js","sources":["constants.js","action-handler.js","defaults.js","roll-handler.js","settings.js","system-manager.js","init.js","utils.js"],"sourcesContent":["/**\n * Module-based constants\n */\nexport const MODULE = {\n    ID: 'token-action-hud-ironsworn'\n}\n\n/**\n * Core module\n */\nexport const CORE_MODULE = {\n    ID: 'token-action-hud-core'\n}\n\n/**\n * Core module version required by the system module\n */\nexport const REQUIRED_CORE_MODULE_VERSION = '2.0'\n\n/**\n * Action types\n */\nexport const ACTION_TYPE = {\n    stat: 'IRONSWORN.Stats',\n    meter: 'tokenActionHud.ironsworn.meters',\n    impact: 'IRONSWORN.Impacts',\n    utility: 'tokenActionHud.utility'\n}\n\n/**\n * Groups\n */\nexport const GROUP = {\n    stat: { id: 'stat', name: 'IRONSWORN.Stats', type: 'system' },\n    meter: { id: 'meter', name: 'tokenActionHud.ironsworn.meters', type: 'system' },\n    progress: { id: 'progress', name: 'IRONSWORN.ITEMS.SubtypeProgress', type: 'system' },\n    vow: { id: 'vow', name: 'IRONSWORN.ITEMS.SubtypeVow', type: 'system' },\n    connection: { id: 'connection', name: 'IRONSWORN.ITEMS.SubtypeConnection', type: 'system' },\n    path: { id: 'path', name: 'IRONSWORN.Asset Categories.Starforged.Path Assets.Title', type: 'system' },\n    companion: { id: 'companion', name: 'IRONSWORN.Asset Categories.Starforged.Companion Assets.Title', type: 'system' },\n    deed: { id: 'deed', name: 'IRONSWORN.Asset Categories.Starforged.Deed Assets.Title', type: 'system' },\n    module: { id: 'module', name: 'IRONSWORN.Asset Categories.Starforged.Module Assets.Title', type: 'system' },\n    supportVehicle: { id: 'supportVehicle', name: 'IRONSWORN.Asset Categories.Starforged.Support Vehicle Assets.Title', type: 'system' },\n    commandVehicle: { id: 'commandVehicle', name: 'IRONSWORN.Asset Categories.Starforged.Command Vehicle Assets.Title', type: 'system' },\n    ritual: { id: 'ritual', name: 'IRONSWORN.Asset Categories.Classic.Ritual Assets.Title', type: 'system' },\n    combatTalent: { id: 'combatTalent', name: 'IRONSWORN.Asset Categories.Classic.Combat Talent Assets.Title', type: 'system' },\n    misfortune: { id: 'misfortune', name: 'IRONSWORN.IMPACT.CATEGORY.Misfortunes', type: 'system' },\n    lastingEffect: { id: 'lastingEffect', name: 'IRONSWORN.IMPACT.CATEGORY.LastingEffects', type: 'system' },\n    burden: { id: 'burden', name: 'IRONSWORN.IMPACT.CATEGORY.Burdens', type: 'system' },\n    vehicleTrouble: { id: 'vehicleTrouble', name: 'IRONSWORN.IMPACT.CATEGORY.Vehicle', type: 'system' },\n    bane: { id: 'bane', name: 'IRONSWORN.DEBILITY.CATEGORY.Banes', type: 'system' },\n    condition: { id: 'condition', name: 'IRONSWORN.DEBILITY.CATEGORY.Conditions', type: 'system' },\n    utility: { id: 'utility', name: 'tokenActionHud.utility', type: 'system' }\n}\n\n/**\n * Item types\n */\nexport const ITEM_TYPE = {\n    asset: { groupId: 'asset' },\n    progress: { groupId: 'progress' },\n    connection: { groupId: 'connection' },\n    vow: { groupId: 'vow' },\n    bondset: { groupId: 'bondset' },\n    path: { groupId: 'path' },\n    companion: { groupId: 'companion' },\n    ritual: { groupId: 'ritual' },\n    deed: { groupId: 'deed' },\n    module: { groupId: 'module' },\n    commandVehicle: { groupId: 'commandVehicle' },\n    supportVehicle: { groupId: 'supportVehicle' },\n    combatTalent: { groupId: 'combatTalent' }\n}\n\n/**\n * Characteristics\n */\nexport const STATS = {\n    edge: 'IRONSWORN.Edge',\n    heart: 'IRONSWORN.Heart',\n    iron: 'IRONSWORN.Iron',\n    shadow: 'IRONSWORN.Shadow',\n    wits: 'IRONSWORN.Wits'\n}\n\n/**\n * Meters\n */\nexport const METERS = {\n    health: 'IRONSWORN.Health',\n    spirit: 'IRONSWORN.Spirit',\n    supply: 'IRONSWORN.Supply',\n    momentum: 'IRONSWORN.Momentum',\n    hold: 'IRONSWORN.Hold'\n}\n\n/**\n * Impacts for Starforged\n */\nexport const IMPACTS_SF = {\n    wounded: { name: 'IRONSWORN.IMPACT.Wounded', groupId: 'misfortune' },\n    shaken: { name: 'IRONSWORN.IMPACT.Shaken', groupId: 'misfortune' },\n    unprepared: { name: 'IRONSWORN.IMPACT.Unprepared', groupId: 'misfortune' },\n    permanentlyharmed: { name: 'IRONSWORN.IMPACT.Permanentlyharmed', groupId: 'lastingEffect' },\n    traumatized: { name: 'IRONSWORN.IMPACT.Traumatized', groupId: 'lastingEffect' },\n    doomed: { name: 'IRONSWORN.IMPACT.Doomed', groupId: 'burden' },\n    tormented: { name: 'IRONSWORN.IMPACT.Tormented', groupId: 'burden' },\n    indebted: { name: 'IRONSWORN.IMPACT.Indebted', groupId: 'burden' },\n    battered: { name: 'IRONSWORN.IMPACT.Battered', groupId: 'vehicleTrouble' },\n    cursed: { name: 'IRONSWORN.IMPACT.Cursed', groupId: 'vehicleTrouble' }\n}\n\n/**\n * Impacts for Ironsworn\n */\nexport const IMPACTS_IS = {\n    wounded: { name: 'IRONSWORN.Debility.Wounded', groupId: 'condition' },\n    unprepared: { name: 'IRONSWORN.Debility.Unprepared', groupId: 'condition' },\n    shaken: { name: 'IRONSWORN.Debility.Shaken', groupId: 'condition' },\n    encumbered: { name: 'IRONSWORN.Debility.Encumbered', groupId: 'condition' },\n    maimed: { name: 'IRONSWORN.Debility.Maimed', groupId: 'bane' },\n    corrupted: { name: 'IRONSWORN.Debility.Corrupted', groupId: 'bane' },\n    cursed: { name: 'IRONSWORN.Debility.Cursed', groupId: 'burden' },\n    tormented: { name: 'IRONSWORN.Debility.Tormented', groupId: 'burden' },\n}\n\n/**\n * Impacts for Starships\n */\nexport const IMPACTS_STARSHIP = {\n    battered: { name: 'IRONSWORN.IMPACT.Battered', groupId: 'vehicleTrouble' },\n    cursed: { name: 'IRONSWORN.IMPACT.Cursed', groupId: 'vehicleTrouble' }\n}\n","// System Module Imports\nimport { ACTION_TYPE, ITEM_TYPE, STATS, METERS, IMPACTS_SF, IMPACTS_IS, IMPACTS_STARSHIP } from './constants.js'\n// import { Utils } from './utils.js'\n\nexport let ActionHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's ActionHandler class and builds system-defined actions for the HUD\n     */\n    ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\n        /**\n         * Build system actions\n         * Called by Token Action HUD Core\n         * @override\n         * @param {array} groupIds\n         */a\n        async buildSystemActions(groupIds) {\n            // Set actor and token variables\n            this.actors = (!this.actor) ? this._getActors() : [this.actor]\n            this.actorType = this.actor?.type\n\n            // Set items variable\n            if (this.actor) {\n                let items = this.actor.items\n                items = coreModule.api.Utils.sortItemsByName(items)\n                this.items = items\n            }\n\n            if (this.actorType === 'character') {\n                this.#buildCharacterActions()\n            } else if (this.actorType === 'starship') {\n                this.#buildStarshipActions()\n            } else if (this.actorType === 'shared') {\n                this.#buildSharedActions()\n            }\n        }\n\n        /**\n         * Build character actions\n         * @private\n         */\n        #buildCharacterActions() {\n            this.#buildInventory()\n            this.#buildStats()\n            this.#buildMeters()\n            this.#buildImpacts()\n        }\n\n        /**\n         * Build starship actions\n         * @private\n         */\n        #buildStarshipActions() {\n            this.#buildImpacts(true)\n        }\n\n        /**\n         * Build shared sheet actions\n         * @private\n         */\n        #buildSharedActions() {\n            this.#buildInventory()\n        }\n\n        /**\n         * Build inventory\n         * @private\n         */\n        async #buildInventory() {\n            if (this.items.size === 0) return\n\n            const actionTypeId = 'item'\n            const inventoryMap = new Map()\n\n            for (const [itemId, itemData] of this.items) {\n                const itemDataTemp = structuredClone(itemData)\n                if (itemDataTemp.type === 'progress') {\n                    if (itemDataTemp.system.subtype === 'vow') {\n                        itemDataTemp.type = 'vow'\n                    } else if (itemDataTemp.system.subtype === 'bond') {\n                        itemDataTemp.type = 'connection'\n                    }\n                } else if (itemDataTemp.type === 'asset') {\n                    if (itemDataTemp.system.category === 'Path') {\n                        itemDataTemp.type = 'path'\n                    } else if (itemDataTemp.system.category === 'Companion') {\n                        itemDataTemp.type = 'companion'\n                    } else if (itemDataTemp.system.category === 'Combat Talent') {\n                        itemDataTemp.type = 'combatTalent'\n                    } else if (itemDataTemp.system.category === 'Ritual') {\n                        itemDataTemp.type = 'ritual'\n                    } else if (itemDataTemp.system.category === 'Deed') {\n                        itemDataTemp.type = 'deed'\n                    } else if (itemDataTemp.system.category === 'Module') {\n                        itemDataTemp.type = 'module'\n                    } else if (itemDataTemp.system.category === 'Command Vehicle') {\n                        itemDataTemp.type = 'commandVehicle'\n                    } else if (itemDataTemp.system.category === 'Support Vehicle') {\n                        itemDataTemp.type = 'supportVehicle'\n                    }\n                }\n                const type = itemDataTemp.type\n                const typeMap = inventoryMap.get(type) ?? new Map()\n                typeMap.set(itemId, itemDataTemp)\n                inventoryMap.set(type, typeMap)\n            }\n\n            for (const [type, typeMap] of inventoryMap) {\n                const groupId = ITEM_TYPE[type]?.groupId\n\n                if (!groupId) continue\n\n                const groupData = { id: groupId, type: 'system' }\n\n                // Get actions\n                const actions = [...typeMap].map(([itemId, itemData]) => {\n                    const id = itemId\n                    const name = itemData.name\n                    const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE[actionTypeId])\n                    const listName = `${actionTypeName ? `${actionTypeName}: ` : ''}${name}`\n                    const encodedValue = [actionTypeId, id].join(this.delimiter)\n                    const info1 = (itemData.type === 'progress' || itemData.system.subtype === 'vow' || itemData.type === 'connection') ? { text: Math.floor(itemData.system.current / 4).toString() } : null\n\n                    return {\n                        id,\n                        name,\n                        listName,\n                        encodedValue,\n                        info1\n                    }\n                })\n                // TAH Core method to add actions to the action list\n                this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n         * Build stats\n         * @private\n         */\n        #buildStats() {\n            const actionTypeId = 'stat'\n            const groupData = { id: 'stat', type: 'system' }\n\n            // Get actions\n            const actions = []\n            for (const stat in STATS) {\n                const id = stat\n                const name = coreModule.api.Utils.i18n(STATS[stat]).charAt(0).toUpperCase() + coreModule.api.Utils.i18n(STATS[stat]).slice(1)\n                const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE[actionTypeId])\n                const listName = `${actionTypeName ? `${actionTypeName}: ` : ''}${name}`\n                const encodedValue = [actionTypeId, id].join(this.delimiter)\n                const info1 = { text: this.actor.system[stat] }\n                actions.push({\n                    id,\n                    name,\n                    listName,\n                    encodedValue,\n                    info1\n                })\n            }\n            // TAH Core method to add actions to the action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build meters\n         * @private\n         */\n        #buildMeters() {\n            const actionTypeId = 'meter'\n            const groupData = { id: 'meter', type: 'system' }\n\n            // Get actions\n            const actions = []\n            for (const meter in METERS) {\n                const id = meter\n                if (meter == 'hold' && !game.settings.get('foundry-ironsworn', 'character-hold')) {\n                    continue\n                }\n\n                const name = coreModule.api.Utils.i18n(METERS[meter]).charAt(0).toUpperCase() + coreModule.api.Utils.i18n(METERS[meter]).slice(1)\n                const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE[actionTypeId])\n                const listName = `${actionTypeName ? `${actionTypeName}: ` : ''}${name}`\n                const encodedValue = [actionTypeId, id].join(this.delimiter)\n                const info1 = { text: this.actor.system[meter].value }\n                actions.push({\n                    id,\n                    name,\n                    listName,\n                    encodedValue,\n                    info1\n                })\n            }\n            // TAH Core method to add actions to the action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build impacts\n         * @private\n         */\n        async #buildImpacts(isStarship) {\n            const actionTypeId = 'impact'\n            const impactMap = new Map()\n            let IMPACTS\n\n            if (this.actor.flags.core?.sheetClass === 'ironsworn.IronswornCharacterSheetV2') {\n                IMPACTS = IMPACTS_IS\n            } else if (isStarship) {\n                IMPACTS = IMPACTS_STARSHIP\n            } else {\n                IMPACTS = IMPACTS_SF\n            }\n\n            for (const key in IMPACTS) {\n                if (IMPACTS.hasOwnProperty(key)) {\n                    const nestedObject = IMPACTS[key];\n                    const groupIdMap = impactMap.get(nestedObject.groupId) ?? new Map()\n                    groupIdMap.set(key, nestedObject.groupId)\n                    impactMap.set(nestedObject.groupId, groupIdMap)\n                }\n            }\n\n            for (const [groupId, groupIdMap] of impactMap) {\n                if (!groupId) continue\n\n                const groupData = { id: groupId, type: 'system' }\n\n                // Get actions\n                const actions = [...groupIdMap].map(([impactId]) => {\n                    const id = impactId\n                    const name = coreModule.api.Utils.i18n(IMPACTS[impactId].name).charAt(0).toUpperCase() + coreModule.api.Utils.i18n(IMPACTS[impactId].name).slice(1)\n                    const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE[actionTypeId])\n                    const listName = `${actionTypeName ? `${actionTypeName}: ` : ''}${name}`\n                    const encodedValue = [actionTypeId, id].join(this.delimiter)\n                    const info1 = { text: this.actor.system.debility[impactId] ? '\\u{1F518}' : null }\n                    return {\n                        id,\n                        name,\n                        listName,\n                        encodedValue,\n                        info1\n                    }\n                })\n                // TAH Core method to add actions to the action list\n                this.addActions(actions, groupData)\n            }\n        }\n    }\n})\n","import { GROUP } from './constants.js'\n\n/**\n * Default layout and groups\n */\nexport let DEFAULTS = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    const groups = GROUP\n    Object.values(groups).forEach(group => {\n        group.name = coreModule.api.Utils.i18n(group.name)\n        group.listName = `Group: ${coreModule.api.Utils.i18n(group.listName ?? group.name)}`\n    })\n    const groupsArray = Object.values(groups)\n    DEFAULTS = {\n        layout: [\n            {\n                nestId: 'asset',\n                id: 'asset',\n                name: coreModule.api.Utils.i18n('IRONSWORN.ITEMS.TypeAsset'),\n                groups: [\n                    { ...groups.path, nestId: 'asset_path' },\n                    { ...groups.companion, nestId: 'asset_companion' },\n                    { ...groups.ritual, nestId: 'asset_ritual' },\n                    { ...groups.deed, nestId: 'asset_deed' },\n                    { ...groups.module, nestId: 'asset_module' },\n                    { ...groups.commandVehicle, nestId: 'asset_commandVehicle' },\n                    { ...groups.supportVehicle, nestId: 'asset_supportVehicle' },\n                    { ...groups.combatTalent, nestId: 'asset_combatTalent' }\n                ]\n            },\n            {\n                nestId: 'progress',\n                id: 'progress',\n                name: coreModule.api.Utils.i18n('IRONSWORN.ITEMS.SubtypeProgress'),\n                groups: [\n                    { ...groups.progress, nestId: 'progress_progress' },\n                    { ...groups.vow, nestId: 'progress_vow' }\n                ]\n            },\n            {\n                nestId: 'connection',\n                id: 'connection',\n                name: coreModule.api.Utils.i18n('IRONSWORN.ITEMS.SubtypeConnection'),\n                groups: [\n                    { ...groups.connection, nestId: 'connection_connection' }\n                ]\n            },\n            {\n                nestId: 'stat',\n                id: 'stat',\n                name: coreModule.api.Utils.i18n('IRONSWORN.Stats'),\n                groups: [\n                    { ...groups.stat, nestId: 'stat_stat' }\n                ]\n            },\n            {\n                nestId: 'meter',\n                id: 'meter',\n                name: coreModule.api.Utils.i18n('tokenActionHud.ironsworn.meters'),\n                groups: [\n                    { ...groups.meter, nestId: 'meter_meter' }\n                ]\n            },\n            {\n                nestId: 'impact',\n                id: 'impact',\n                name: coreModule.api.Utils.i18n('IRONSWORN.Impacts'),\n                groups: [\n                    { ...groups.misfortune, nestId: 'impact_misfortune' },\n                    { ...groups.lastingEffect, nestId: 'impact_lastingEffect' },\n                    { ...groups.burden, nestId: 'impact_burden' },\n                    { ...groups.vehicleTrouble, nestId: 'impact_vehicleTrouble' },\n                    { ...groups.bane, nestId: 'impact_bane' },\n                    { ...groups.condition, nestId: 'impact_condition' }\n                ]\n            },\n            {\n                nestId: 'utility',\n                id: 'utility',\n                name: coreModule.api.Utils.i18n('tokenActionHud.utility'),\n                groups: [\n                    { ...groups.combat, nestId: 'utility_combat' },\n                    { ...groups.token, nestId: 'utility_token' },\n                    { ...groups.rests, nestId: 'utility_rests' },\n                    { ...groups.utility, nestId: 'utility_utility' }\n                ]\n            }\n        ],\n        groups: groupsArray\n    }\n})\n","export let RollHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's RollHandler class and handles action events triggered when an action is clicked\n     */\n    RollHandler = class RollHandler extends coreModule.api.RollHandler {\n        /**\n         * Handle action click\n         * Called by Token Action HUD Core when an action is left or right-clicked\n         * @override\n         * @param {object} event        The event\n         * @param {string} encodedValue The encoded value\n         */\n        async handleActionClick(event, encodedValue) {\n            const [actionTypeId, actionId] = encodedValue.split('|')\n\n            const renderable = ['item']\n\n            if (renderable.includes(actionTypeId) && this.isRenderItem()) {\n                return this.doRenderItem(this.actor, actionId)\n            }\n\n            const knownCharacters = ['character', 'starship']\n\n            // If single actor is selected\n            if (this.actor) {\n                await this.#handleAction(event, this.actor, this.token, actionTypeId, actionId)\n                return\n            }\n\n            const controlledTokens = canvas.tokens.controlled\n                .filter((token) => knownCharacters.includes(token.actor?.type))\n\n            // If multiple actors are selected\n            for (const token of controlledTokens) {\n                const actor = token.actor\n                await this.#handleAction(event, actor, token, actionTypeId, actionId)\n            }\n        }\n\n        /**\n         * Handle action hover\n         * Called by Token Action HUD Core when an action is hovered on or off\n         * @override\n         * @param {object} event        The event\n         * @param {string} encodedValue The encoded value\n         */\n        async handleActionHover(event, encodedValue) { }\n\n        /**\n         * Handle group click\n         * Called by Token Action HUD Core when a group is right-clicked while the HUD is locked\n         * @override\n         * @param {object} event The event\n         * @param {object} group The group\n         */\n        async handleGroupClick(event, group) { }\n\n        /**\n         * Handle action\n         * @private\n         * @param {object} event        The event\n         * @param {object} actor        The actor\n         * @param {object} token        The token\n         * @param {string} actionTypeId The action type id\n         * @param {string} actionId     The actionId\n         */\n        async #handleAction(event, actor, token, actionTypeId, actionId) {\n            switch (actionTypeId) {\n                case 'item':\n                    if (actor.items.get(actionId).type === 'progress') {\n                        this.#handleProgressAction(event, actor, actionId)\n                    }\n                    this.#handleAssetAction(event, actor, actionId)\n                    break\n                case 'stat':\n                    this.#handleStatAction(event, actor, actionId)\n                    break\n                case 'meter':\n                    this.#handleMeterAction(event, actor, actionId)\n                    break\n                case 'impact':\n                    this.#handleImpactAction(event, actor, actionId)\n                    break\n                case 'utility':\n                    this.#handleUtilityAction(token, actionId)\n                    break\n            }\n        }\n\n        /**\n         * Handle item action\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #handleProgressAction(event, actor, actionId) {\n            actor.items.get(actionId).sheet.render(true)\n        }\n\n        /**\n         * Handle item action\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #handleAssetAction(event, actor, actionId) {\n            actor.items.get(actionId).sheet.render(true)\n        }\n\n        /**\n         * Handle stat action\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #handleStatAction(_event, actor, actionId) {\n            CONFIG.IRONSWORN.applications.IronswornPrerollDialog.showForStat(actionId, actor)\n        }\n\n        /**\n         * Handle meter action\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #handleMeterAction(_event, actor, actionId) {\n            if (actionId !== 'momentum') {\n                CONFIG.IRONSWORN.applications.IronswornPrerollDialog.showForStat(actionId, actor)\n            }\n        }\n\n        /**\n         * Handle impact action\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        async #handleImpactAction(_event, actor, actionId) {\n            const tempValue = !actor.system.debility[actionId]\n            const data = {\n                system: {\n                    debility: {\n                        [actionId]: tempValue\n                    }\n                }\n            }\n            await actor.update(data)\n            Hooks.call('tokenActionHudCoreApiReady', actor)\n        }\n\n        /**\n         * Handle utility action\n         * @private\n         * @param {object} token    The token\n         * @param {string} actionId The action id\n         */\n        async #handleUtilityAction(token, actionId) {\n            switch (actionId) {\n                case 'endTurn':\n                    if (game.combat?.current?.tokenId === token.id) {\n                        await game.combat?.nextTurn()\n                    }\n                    break\n            }\n        }\n    }\n})\n","import { MODULE } from './constants.js'\n\n/**\n * Register module settings\n * Called by Token Action HUD Core to register Token Action HUD system module settings\n * @param {function} coreUpdate Token Action HUD Core update function\n */\nexport function register(coreUpdate) {\n    // game.settings.register(MODULE.ID, 'displayUnequipped', {\n    //     name: 'Test',\n    //     hint: 'Test Hint',\n    //     scope: 'client',\n    //     config: true,\n    //     type: Boolean,\n    //     default: true,\n    //     onChange: (value) => {\n    //         coreUpdate(value)\n    //     }\n    // })\n}\n","// System Module Imports\nimport { ActionHandler } from './action-handler.js'\nimport { RollHandler as Core } from './roll-handler.js'\nimport { MODULE } from './constants.js'\nimport { DEFAULTS } from './defaults.js'\nimport * as systemSettings from './settings.js'\n\nexport let SystemManager = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's SystemManager class\n     */\n    SystemManager = class SystemManager extends coreModule.api.SystemManager {\n        /**\n         * Returns an instance of the ActionHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {class} The ActionHandler instance\n         */\n        getActionHandler() {\n            return new ActionHandler()\n        }\n\n        /**\n         * Returns a list of roll handlers to Token Action HUD Core\n         * Used to populate the Roll Handler module setting choices\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {object} The available roll handlers\n         */\n        getAvailableRollHandlers() {\n            const coreTitle = 'Core Ironsworn'\n            const choices = { core: coreTitle }\n            return choices\n        }\n\n        /**\n         * Returns an instance of the RollHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @param {string} rollHandlerId The roll handler ID\n         * @returns {class}              The RollHandler instance\n         */\n        getRollHandler(rollHandlerId) {\n            let rollHandler\n            switch (rollHandlerId) {\n                case 'core':\n                default:\n                    rollHandler = new Core()\n                    break\n            }\n            return rollHandler\n        }\n\n        /**\n         * Returns the default layout and groups to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @returns {object} The default layout and groups\n         */\n        async registerDefaults() {\n            return DEFAULTS\n        }\n\n        /**\n         * Register Token Action HUD system module settings\n         * Called by Token Action HUD Core\n         * @override\n         * @param {function} coreUpdate The Token Action HUD Core update function\n         */\n        registerSettings(coreUpdate) {\n            systemSettings.register(coreUpdate)\n        }\n\n        /**\n         * Returns styles to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {object} The TAH system styles\n         */\n        registerStyles() {\n            return {\n                template: {\n                    class: 'tah-style-template-style', // The class to add to first DIV element\n                    file: 'tah-ironsworn', // The file without the css extension\n                    moduleId: MODULE.ID, // The module ID\n                    name: 'Template Style' // The name to display in the Token Action HUD Core 'Style' module setting\n                }\n            }\n        }\n    }\n})\n","import { SystemManager } from './system-manager.js'\nimport { MODULE, REQUIRED_CORE_MODULE_VERSION } from './constants.js'\n\nHooks.on('tokenActionHudCoreApiReady', async () => {\n    /**\n     * Return the SystemManager and requiredCoreModuleVersion to Token Action HUD Core\n     */\n    const module = game.modules.get(MODULE.ID)\n    module.api = {\n        requiredCoreModuleVersion: REQUIRED_CORE_MODULE_VERSION,\n        SystemManager\n    }\n    Hooks.call('tokenActionHudSystemReady', module)\n})\n","import { MODULE } from './constants.js'\n\nexport let Utils = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Utility functions\n     */\n    Utils = class Utils {\n        /**\n         * Get setting\n         * @param {string} key               The key\n         * @param {string=null} defaultValue The default value\n         * @returns {string}                 The setting value\n         */\n        static getSetting(key, defaultValue = null) {\n            let value = defaultValue ?? null\n            try {\n                value = game.settings.get(MODULE.ID, key)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n            return value\n        }\n\n        /**\n         * Set setting\n         * @param {string} key   The key\n         * @param {string} value The value\n         */\n        static async setSetting(key, value) {\n            try {\n                value = await game.settings.set(MODULE.ID, key, value)\n                coreModule.api.Logger.debug(`Setting '${key}' set to '${value}'`)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n        }\n    }\n})\n"],"names":["MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","ACTION_TYPE","stat","meter","impact","utility","GROUP","id","name","type","progress","vow","connection","path","companion","deed","module","supportVehicle","commandVehicle","ritual","combatTalent","misfortune","lastingEffect","burden","vehicleTrouble","bane","condition","ITEM_TYPE","asset","groupId","bondset","STATS","edge","heart","iron","shadow","wits","METERS","health","spirit","supply","momentum","hold","IMPACTS_SF","wounded","shaken","unprepared","permanentlyharmed","traumatized","doomed","tormented","indebted","battered","cursed","IMPACTS_IS","encumbered","maimed","corrupted","IMPACTS_STARSHIP","ActionHandler","Hooks","once","async","coreModule","api","a","groupIds","this","actors","actor","_getActors","actorType","items","Utils","sortItemsByName","buildCharacterActions","buildStarshipActions","buildSharedActions","buildInventory","buildStats","buildMeters","buildImpacts","size","actionTypeId","inventoryMap","Map","itemId","itemData","itemDataTemp","structuredClone","system","subtype","category","typeMap","get","set","groupData","actions","map","actionTypeName","i18n","listName","encodedValue","join","delimiter","info1","text","Math","floor","current","toString","addActions","charAt","toUpperCase","slice","push","game","settings","value","isStarship","impactMap","IMPACTS","flags","core","sheetClass","key","hasOwnProperty","nestedObject","groupIdMap","impactId","debility","DEFAULTS","groups","Object","values","forEach","group","groupsArray","layout","nestId","combat","token","rests","RollHandler","register","coreUpdate","event","actionId","split","includes","isRenderItem","doRenderItem","knownCharacters","handleAction","controlledTokens","canvas","tokens","controlled","filter","handleProgressAction","handleAssetAction","handleStatAction","handleMeterAction","handleImpactAction","handleUtilityAction","sheet","render","_event","CONFIG","IRONSWORN","applications","IronswornPrerollDialog","showForStat","data","update","call","tokenId","nextTurn","SystemManager","getActionHandler","getAvailableRollHandlers","getRollHandler","rollHandlerId","rollHandler","Core","registerSettings","registerStyles","template","class","file","moduleId","on","modules","requiredCoreModuleVersion","static","defaultValue","Logger","debug"],"mappings":"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"}